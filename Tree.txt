1.BST or NOT

boolean isBSTUtil(Node node, int min, int max) 
    { 
        if (node == null) 
            return true; 

        if (node.data < min || node.data > max) 
            return false; 

        return (isBSTUtil(node.left, min, node.data-1) && 
                isBSTUtil(node.right, node.data+1, max)); 
    } 
	
2.identical or not

 boolean identicalTrees(Node a, Node b)  
    { 

        if (a == null && b == null) 
            return true; 

        if (a != null && b != null && a.data == b.data )  
            return (identicalTrees(a.left, b.left) 
                    && identicalTrees(a.right, b.right)); 
 
        return false; 
    } 
	
3.Mirror image or not

boolean isMirror(Node node1, Node node2)  
    { 
        if (node1 == null && node2 == null) 
            return true; 
          
        if (node1 != null && node2 != null && node1.key == node2.key) 
            return (isMirror(node1.left, node2.right) 
                    && isMirror(node1.right, node2.left)); 
   
        return false; 
    } 
	
4.LCA

Node lca(Node node, int n1, int n2)  
    { 
        if (node == null) 
            return null; 
           
        if (node.data > n1 && node.data > n2) 
            return lca(node.left, n1, n2); 
           
        if (node.data < n1 && node.data < n2)  
            return lca(node.right, n1, n2); 
   
        return node; 
    } 
	
5.Height balanced or not
boolean isBalanced(Node node) 
    { 
        int lh; /* for height of left subtree */
  
        int rh; /* for height of right subtree */
  
        /* If tree is empty then return true */
        if (node == null) 
            return true; 
  
        /* Get the height of left and right sub trees */
        lh = height(node.left); 
        rh = height(node.right); 
  
        if (Math.abs(lh - rh) <= 1
            && isBalanced(node.left) 
            && isBalanced(node.right)) 
            return true; 
  
        /* If we reach here then tree is not height-balanced */
        return false; 
    } 
  
  
1. Print Vertical order traversal - O(nlogn)
 // Utility function to store vertical order in map 'm' 
    // 'hd' is horizontal distance of current node from root. 
    // 'hd' is initially passed as 0 
    static void getVerticalOrder(Node root, int hd, 
                                TreeMap<Integer,Vector<Integer>> m) 
    { 
        // Base case 
        if(root == null) 
            return; 
          
        //get the vector list at 'hd' 
        Vector<Integer> get =  m.get(hd); 
          
        // Store current node in map 'm' 
        if(get == null) 
        { 
            get = new Vector<>(); 
            get.add(root.key); 
        } 
        else
            get.add(root.key); 
          
        m.put(hd, get); 
          
        // Store nodes in left subtree 
        getVerticalOrder(root.left, hd-1, m); 
          
        // Store nodes in right subtree 
        getVerticalOrder(root.right, hd+1, m); 
    } 
      
    // The main function to print vertical oder of a binary tree 
    // with given root 
    static void printVerticalOrder(Node root) 
    { 
        // Create a map and store vertical oder in map using 
        // function getVerticalOrder() 
        TreeMap<Integer,Vector<Integer>> m = new TreeMap<>(); 
        int hd =0; 
        getVerticalOrder(root,hd,m); 
          
        // Traverse the map and print nodes at every horigontal 
        // distance (hd) 
        for (Entry<Integer, Vector<Integer>> entry : m.entrySet()) 
        { 
            System.out.println(entry.getValue()); 
        } 
    } 
	
2. Print Bottom View of Binary Tree

public List<List<Integer>> verticalOrder(TreeNode root) {
    List<List<Integer>> result = new ArrayList<List<Integer>>();
    if(root==null)
        return result;
 
    // level and list    
    HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();
 
    LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
    LinkedList<Integer> level = new LinkedList<Integer>();
 
    queue.offer(root);
    level.offer(0);
 
    int minLevel=0;
    int maxLevel=0;
 
    while(!queue.isEmpty()){
        TreeNode p = queue.poll();
        int l = level.poll();
 
        //track min and max levels
        minLevel=Math.min(minLevel, l);
        maxLevel=Math.max(maxLevel, l);
 
        if(map.containsKey(l)){
            map.get(l).add(p.val);
        }else{
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(p.val);
            map.put(l, list);
        }
 
        if(p.left!=null){
            queue.offer(p.left);
            level.offer(l-1);
        }
 
        if(p.right!=null){
            queue.offer(p.right);
            level.offer(l+1);
        }
    }
 
 
    for(int i=minLevel; i<=maxLevel; i++){
        if(map.containsKey(i)){
            result.add(map.get(i));
        }
    }
 
    return result;
}

3.Populate next right pointers in a binary tree   -  O(n)
https://www.youtube.com/watch?v=G46cenlnXvI

void connect(struct Node* root) 
{ 
    queue<Node*> q; 
    q.push(root); 
  
    // null marker to represent end of current level 
    q.push(NULL);  
  
    // Do Level order of tree using NULL markers 
    while (!q.empty()) { 
        Node *p = q.front(); 
        q.pop(); 
        if (p != NULL) { 
  
            // next element in queue represents next  
            // node at current Level  
            p->nextRight = q.front(); 
  
            // push left and right children of current 
            // node 
            if (p->left) 
                q.push(p->left);  
            if (p->right) 
                q.push(p->right); 
        }  
         
        // if queue is not empty, push NULL to mark  
        // nodes at this level are visited 
        else if (!q.empty())  
            q.push(NULL);  
    } 
} 

4.Serialize deserialize tree
https://www.programcreek.com/2014/05/leetcode-serialize-and-deserialize-binary-tree-java/

Clone binay tree with random pointers
https://www.techiedelight.com/clone-a-binary-tree-with-random-pointers/