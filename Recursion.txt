check if a number is palindrome using recursion
// A recursive function to  
// find out whether num is  
// palindrome or not.  
// Initially, dupNum contains 
// address of a copy of num. 
public static int isPalUtil(int num,  
                            int dupNum) 
{ 
    // Base case (needed for recursion 
    // termination): This statement 
    // mainly compares the first digit 
    // with the last digit 
    if (oneDigit(num) == 1) 
        if(num == (dupNum) % 10) 
        return 1; 
        else
        return 0; 
  
    // This is the key line in  
    // this method. Note that  
    // all recursive calls have  
    // a separate copy of num, 
    // but they all share same 
    // copy of *dupNum. We divide  
    // num while moving up the  
    // recursion tree 
    if (isPalUtil((int)(num / 10), dupNum) == 0) 
        return -1; 
  
    // The following statements  
    // are executed when we move 
    // up the recursion call tree 
    dupNum = (int)(dupNum / 10); 
  
    // At this point, if num%10  
    // contains i'th digit from  
    // beiginning, then (*dupNum)%10  
    // contains i'th digit from end 
    if(num % 10 == (dupNum) % 10)  
        return 1;  
    else
        return 0; 
} 